---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: sabnzbd
spec:
  chartRef:
    kind: OCIRepository
    name: sabnzbd
  install:
    remediation:
      retries: -1
  interval: 30m
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      app:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            env:
              SABNZBD__API_KEY:
                valueFrom:
                  secretKeyRef:
                    key: api_key
                    name: sabnzbd
              SABNZBD__HOST_WHITELIST_ENTRIES: >-
                sabnzbd,
                sabnzbd.downloads,
                sabnzbd.downloads.svc,
                sabnzbd.downloads.svc.cluster,
                sabnzbd.downloads.svc.cluster.local,
                ${HOSTNAME}
              SABNZBD__NZB_KEY:
                valueFrom:
                  secretKeyRef:
                    key: nzb_key
                    name: sabnzbd
              SABNZBD__PORT: &port 8080
            image:
              repository: ghcr.io/home-operations/sabnzbd
              tag: >-
                4.5.3@sha256:ecb57bd6257fbfbd9aee70d8ef3df8814b7270ae793fd1f44219ae73cacd519a
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /api?mode=version
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
        initContainers:
          init-install-ffmpeg:
            command:
              - sh
              - "-c"
              - |
                sh -x <<'EOF'
                /config/bin/ffmpeg -version >/dev/null && exit 0
                /config/bin/ffprobe -version >/dev/null && exit 0
                apk -v add tar xz
                mkdir -vp /config/bin/
                arch="$$(uname -m)"
                if [ "$$arch" == "x86_64" ]
                then
                    url="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
                elif [ "$$arch" == "aarch64" ]
                then
                    url="https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-arm64-static.tar.xz"
                else
                    echo "Unknown architecture"
                    exit 1
                fi
                wget -qO- "$$url" |\
                tar -xJvf - --strip-components 1 --wildcards -C /config/bin/ */ffmpeg */ffprobe
                chown -v -R "$${PUID}:$${PGID}" "/config/bin/ffmpeg" "/config/bin/ffprobe"
                EOF
            env:
              PGID: ${APP_GID}
              PUID: ${APP_UID}
            image:
              repository: docker.io/alpine
              tag: latest
            securityContext:
              runAsUser: 0
          init-install-nzbtomedia:
            command:
              - sh
              - '-c'
              - |
                sh -x <<'EOF'
                DIR="/config/scripts/nzbToMedia"
                if [ ! -d "$$DIR" ]
                then
                  mkdir -vp "$$DIR"
                  git clone https://github.com/clinton-hall/nzbToMedia.git "$$DIR"
                else
                  git -C "$$DIR" pull
                fi
                EOF
            image:
              repository: docker.io/alpine/git
              tag: latest
            securityContext:
              runAsUser: ${APP_UID}
        pod:
          securityContext:
            fsGroup: ${APP_GID}
            fsGroupChangePolicy: OnRootMismatch
            runAsGroup: ${APP_GID}
            runAsUser: ${APP_UID}
    persistence:
      config:
        existingClaim: "${VOLSYNC_CLAIM}"
      media:
        type: nfs
        server: norco.${LOCAL_DOMAIN}
        path: /mnt/space/media
        advancedMounts:
          app:
            app:
              - path: /mnt/downloads/usenet
                subPath: downloads/usenet
      tmp:
        type: emptyDir
    route:
      app:
        hostnames: ["{{ .Release.Name }}.${SECRET_DOMAIN}"]
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
    service:
      app:
        ports:
          http:
            port: *port
