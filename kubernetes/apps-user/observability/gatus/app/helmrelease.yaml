---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s-labs/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: gatus
spec:
  chartRef:
    kind: OCIRepository
    name: gatus
  interval: 1h
  install:
    remediation:
      retries: -1
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  values:
    controllers:
      internal: &controller
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-config-internal: &initConfigContainer
            image: &configSyncImage
              repository: ghcr.io/kiwigrid/k8s-sidecar
              tag: 1.30.10@sha256:835d79d8fbae62e42d8a86929d4e3c5eec2e869255dd37756b5a3166c2f22309
            env: &configSyncEnv
              FOLDER: /config
              #LABEL: gatus.io/enabled
              LABEL: gatus.io/internal
              NAMESPACE: ALL
              RESOURCE: both
              UNIQUE_FILENAMES: true
              METHOD: WATCH
            restartPolicy: Always
            resources: &resources
              requests:
                cpu: 10m
              limits:
                memory: 128Mi
          init-config-external:
            <<: *initConfigContainer
            env:
              <<: *configSyncEnv
              LABEL: gatus.io/external
        containers:
          app: &appContainer
            image:
              repository: ghcr.io/twin/gatus
              tag: v5.24.1@sha256:fcd3ba5a7d7db6c1c83780529cd69f249d1dff6deaffcdb6729ac804fe3d4444
            env:
              TZ: "${TIMEZONE}"
              GATUS_CONFIG_PATH: /config
              GATUS_DELAY_START_SECONDS: 5
              WEB_PORT: &port 80
            envFrom:
              - secretRef:
                  name: "{{ .Release.Name }}"
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /health
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext: &securityContext
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: {drop: ["ALL"]}
            resources: *resources
          config-sync-internal: &configSyncContainer
            image: *configSyncImage
            env:
              <<: *configSyncEnv
              LABEL: gatus.io/internal
              METHOD: WATCH
            securityContext: *securityContext
            resources: *resources
          config-sync-external:
            <<: *configSyncContainer
            env:
              <<: *configSyncEnv
              LABEL: gatus.io/external
              METHOD: WATCH
      external:
        <<: *controller
        initContainers:
          init-config-external:
            <<: *initConfigContainer
            env:
              <<: *configSyncEnv
              LABEL: gatus.io/external
        containers:
          app:
            <<: *appContainer
          config-sync-external:
            <<: *configSyncContainer
            env:
              <<: *configSyncEnv
              LABEL: gatus.io/external
              METHOD: WATCH
    defaultPodOptions:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        fsGroupChangePolicy: OnRootMismatch
    persistence:
      config-external:
        existingClaim: "{{ .Release.Name }}-external"
        advancedMounts:
          external: &configPVCMount
            app:
              - path: /config
            config-sync-external:
              - path: /config
            init-config-external:
              - path: /config
      config-internal:
        existingClaim: "{{ .Release.Name }}-internal"
        advancedMounts:
          internal:
            <<: *configPVCMount
            config-sync-internal:
              - path: /config
            init-config-internal:
              - path: /config
      config-file-internal:
        type: configMap
        name: "{{ .Release.Name }}-internal-configmap"
        advancedMounts:
          internal: &configFileMount
            app:
              - path: /config/config.yaml
                subPath: config.yaml
                readOnly: true
      config-file-external:
        type: configMap
        name: "{{ .Release.Name }}-external-configmap"
        advancedMounts:
          external:
            <<: *configFileMount
    rbac:
      bindings:
        gatus:
          type: ClusterRoleBinding
          roleRef:
            identifier: gatus
          subjects:
            - identifier: gatus
      roles:
        gatus:
          type: ClusterRole
          rules:
            - apiGroups: [""]
              resources: ["configmaps", "secrets"]
              verbs: ["get", "watch", "list"]
    route:
      internal:
        hostnames:
          - "{{ .Release.Name }}"
        parentRefs:
          - name: internal
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - kind: Service
                name: "{{ .Release.Name }}-internal"
                namespace: observability
                port: *port
                weight: 1
            matches:
              - path:
                  type: PathPrefix
                  value: /
      external:
        hostnames:
          - "status.${SECRET_DOMAIN}"
        parentRefs:
          - name: external
            namespace: kube-system
            sectionName: https
        rules:
          - backendRefs:
              - kind: Service
                name: "{{ .Release.Name }}-external"
                namespace: observability
                port: *port
                weight: 1
            matches:
              - path:
                  type: PathPrefix
                  value: /
    service:
      internal: &internalService
        controller: internal
        ports:
          http:
            port: *port
      external:
        <<: *internalService
        controller: external
    serviceAccount:
      gatus:
        enabled: true
    serviceMonitor:
      internal: &internalServiceMonitor
        endpoints:
          - port: http
        serviceName: internal
      external:
        <<: *internalServiceMonitor
        serviceName: external
